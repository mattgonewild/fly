// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateVolumeRequest create volume request
//
// swagger:model CreateVolumeRequest
type CreateVolumeRequest struct {

	// compute
	Compute *APIMachineGuest `json:"compute,omitempty"`

	// encrypted
	Encrypted bool `json:"encrypted,omitempty"`

	// fstype
	Fstype string `json:"fstype,omitempty"`

	// machines only
	MachinesOnly bool `json:"machines_only,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// require unique zone
	RequireUniqueZone bool `json:"require_unique_zone,omitempty"`

	// size gb
	SizeGb int64 `json:"size_gb,omitempty"`

	// restore from snapshot
	SnapshotID string `json:"snapshot_id,omitempty"`

	// snapshot retention
	SnapshotRetention int64 `json:"snapshot_retention,omitempty"`

	// fork from remote volume
	SourceVolumeID string `json:"source_volume_id,omitempty"`
}

// Validate validates this create volume request
func (m *CreateVolumeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVolumeRequest) validateCompute(formats strfmt.Registry) error {
	if swag.IsZero(m.Compute) { // not required
		return nil
	}

	if m.Compute != nil {
		if err := m.Compute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compute")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create volume request based on the context it is used
func (m *CreateVolumeRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVolumeRequest) contextValidateCompute(ctx context.Context, formats strfmt.Registry) error {

	if m.Compute != nil {

		if swag.IsZero(m.Compute) { // not required
			return nil
		}

		if err := m.Compute.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compute")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVolumeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVolumeRequest) UnmarshalBinary(b []byte) error {
	var res CreateVolumeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
