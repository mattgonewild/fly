// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	MachinesCordon(params *MachinesCordonParams, opts ...ClientOption) (*MachinesCordonOK, error)

	MachinesCreate(params *MachinesCreateParams, opts ...ClientOption) (*MachinesCreateOK, error)

	MachinesCreateLease(params *MachinesCreateLeaseParams, opts ...ClientOption) (*MachinesCreateLeaseOK, error)

	MachinesDelete(params *MachinesDeleteParams, opts ...ClientOption) (*MachinesDeleteOK, error)

	MachinesDeleteMetadata(params *MachinesDeleteMetadataParams, opts ...ClientOption) (*MachinesDeleteMetadataNoContent, error)

	MachinesExec(params *MachinesExecParams, opts ...ClientOption) (*MachinesExecOK, error)

	MachinesList(params *MachinesListParams, opts ...ClientOption) (*MachinesListOK, error)

	MachinesListEvents(params *MachinesListEventsParams, opts ...ClientOption) (*MachinesListEventsOK, error)

	MachinesListProcesses(params *MachinesListProcessesParams, opts ...ClientOption) (*MachinesListProcessesOK, error)

	MachinesListVersions(params *MachinesListVersionsParams, opts ...ClientOption) (*MachinesListVersionsOK, error)

	MachinesReleaseLease(params *MachinesReleaseLeaseParams, opts ...ClientOption) (*MachinesReleaseLeaseOK, error)

	MachinesRestart(params *MachinesRestartParams, opts ...ClientOption) (*MachinesRestartOK, error)

	MachinesShow(params *MachinesShowParams, opts ...ClientOption) (*MachinesShowOK, error)

	MachinesShowLease(params *MachinesShowLeaseParams, opts ...ClientOption) (*MachinesShowLeaseOK, error)

	MachinesShowMetadata(params *MachinesShowMetadataParams, opts ...ClientOption) (*MachinesShowMetadataOK, error)

	MachinesSignal(params *MachinesSignalParams, opts ...ClientOption) (*MachinesSignalOK, error)

	MachinesStart(params *MachinesStartParams, opts ...ClientOption) (*MachinesStartOK, error)

	MachinesStop(params *MachinesStopParams, opts ...ClientOption) (*MachinesStopOK, error)

	MachinesUncordon(params *MachinesUncordonParams, opts ...ClientOption) (*MachinesUncordonOK, error)

	MachinesUpdate(params *MachinesUpdateParams, opts ...ClientOption) (*MachinesUpdateOK, error)

	MachinesUpdateMetadata(params *MachinesUpdateMetadataParams, opts ...ClientOption) (*MachinesUpdateMetadataNoContent, error)

	MachinesWait(params *MachinesWaitParams, opts ...ClientOption) (*MachinesWaitOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
MachinesCordon “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.
*/
func (a *Client) MachinesCordon(params *MachinesCordonParams, opts ...ClientOption) (*MachinesCordonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesCordonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_cordon",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/cordon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesCordonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesCordonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_cordon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesCreate machines create API
*/
func (a *Client) MachinesCreate(params *MachinesCreateParams, opts ...ClientOption) (*MachinesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_create",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesCreateLease machines create lease API
*/
func (a *Client) MachinesCreateLease(params *MachinesCreateLeaseParams, opts ...ClientOption) (*MachinesCreateLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesCreateLeaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_create_lease",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/lease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesCreateLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesCreateLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_create_lease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesDelete machines delete API
*/
func (a *Client) MachinesDelete(params *MachinesDeleteParams, opts ...ClientOption) (*MachinesDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesDeleteMetadata machines delete metadata API
*/
func (a *Client) MachinesDeleteMetadata(params *MachinesDeleteMetadataParams, opts ...ClientOption) (*MachinesDeleteMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesDeleteMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_delete_metadata",
		Method:             "DELETE",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/metadata/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesDeleteMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesDeleteMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_delete_metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesExec machines exec API
*/
func (a *Client) MachinesExec(params *MachinesExecParams, opts ...ClientOption) (*MachinesExecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesExecParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_exec",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/exec",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesExecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_exec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesList machines list API
*/
func (a *Client) MachinesList(params *MachinesListParams, opts ...ClientOption) (*MachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_list",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesListEvents machines list events API
*/
func (a *Client) MachinesListEvents(params *MachinesListEventsParams, opts ...ClientOption) (*MachinesListEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesListEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_list_events",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesListEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesListEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_list_events: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesListProcesses machines list processes API
*/
func (a *Client) MachinesListProcesses(params *MachinesListProcessesParams, opts ...ClientOption) (*MachinesListProcessesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesListProcessesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_list_processes",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/ps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesListProcessesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesListProcessesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_list_processes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesListVersions machines list versions API
*/
func (a *Client) MachinesListVersions(params *MachinesListVersionsParams, opts ...ClientOption) (*MachinesListVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesListVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_list_versions",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesListVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesListVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_list_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesReleaseLease machines release lease API
*/
func (a *Client) MachinesReleaseLease(params *MachinesReleaseLeaseParams, opts ...ClientOption) (*MachinesReleaseLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesReleaseLeaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_release_lease",
		Method:             "DELETE",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/lease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesReleaseLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesReleaseLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_release_lease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesRestart machines restart API
*/
func (a *Client) MachinesRestart(params *MachinesRestartParams, opts ...ClientOption) (*MachinesRestartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesRestartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_restart",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesRestartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesRestartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_restart: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesShow machines show API
*/
func (a *Client) MachinesShow(params *MachinesShowParams, opts ...ClientOption) (*MachinesShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesShowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_show",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesShowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesShowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_show: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesShowLease machines show lease API
*/
func (a *Client) MachinesShowLease(params *MachinesShowLeaseParams, opts ...ClientOption) (*MachinesShowLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesShowLeaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_show_lease",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/lease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesShowLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesShowLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_show_lease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesShowMetadata machines show metadata API
*/
func (a *Client) MachinesShowMetadata(params *MachinesShowMetadataParams, opts ...ClientOption) (*MachinesShowMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesShowMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_show_metadata",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesShowMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesShowMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_show_metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesSignal machines signal API
*/
func (a *Client) MachinesSignal(params *MachinesSignalParams, opts ...ClientOption) (*MachinesSignalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesSignalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_signal",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/signal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesSignalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesSignalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_signal: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesStart machines start API
*/
func (a *Client) MachinesStart(params *MachinesStartParams, opts ...ClientOption) (*MachinesStartOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesStartParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_start",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesStartReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesStartOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_start: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesStop machines stop API
*/
func (a *Client) MachinesStop(params *MachinesStopParams, opts ...ClientOption) (*MachinesStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_stop",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_stop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesUncordon “Cordoning” a machine refers to disabling its services, so the proxy won’t route requests to it. In flyctl this is used by blue/green deployments; one set of machines is started up with services disabled, and when they are all healthy, the services are enabled on the new machines and disabled on the old ones.
*/
func (a *Client) MachinesUncordon(params *MachinesUncordonParams, opts ...ClientOption) (*MachinesUncordonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesUncordonParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_uncordon",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/uncordon",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesUncordonReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesUncordonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_uncordon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesUpdate machines update API
*/
func (a *Client) MachinesUpdate(params *MachinesUpdateParams, opts ...ClientOption) (*MachinesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_update",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesUpdateMetadata machines update metadata API
*/
func (a *Client) MachinesUpdateMetadata(params *MachinesUpdateMetadataParams, opts ...ClientOption) (*MachinesUpdateMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesUpdateMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_update_metadata",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/metadata/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesUpdateMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesUpdateMetadataNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_update_metadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MachinesWait machines wait API
*/
func (a *Client) MachinesWait(params *MachinesWaitParams, opts ...ClientOption) (*MachinesWaitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMachinesWaitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Machines_wait",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/machines/{machine_id}/wait",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MachinesWaitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MachinesWaitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Machines_wait: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
