// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIMachineRestart The Machine restart policy defines whether and how flyd restarts a Machine after its main process exits. See https://fly.io/docs/machines/guides-examples/machine-restart-policy/.
//
// swagger:model api.MachineRestart
type APIMachineRestart struct {

	// When policy is on-failure, the maximum number of times to attempt to restart the Machine before letting it stop.
	MaxRetries int64 `json:"max_retries,omitempty"`

	// * no - Never try to restart a Machine automatically when its main process exits, whether thatâ€™s on purpose or on a crash.
	// * always - Always restart a Machine automatically and never let it enter a stopped state, even when the main process exits cleanly.
	// * on-failure - Try up to MaxRetries times to automatically restart the Machine if it exits with a non-zero exit code. Default when no explicit policy is set, and for Machines with schedules.
	// Enum: [no always on-failure]
	Policy string `json:"policy,omitempty"`
}

// Validate validates this api machine restart
func (m *APIMachineRestart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var apiMachineRestartTypePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["no","always","on-failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		apiMachineRestartTypePolicyPropEnum = append(apiMachineRestartTypePolicyPropEnum, v)
	}
}

const (

	// APIMachineRestartPolicyNo captures enum value "no"
	APIMachineRestartPolicyNo string = "no"

	// APIMachineRestartPolicyAlways captures enum value "always"
	APIMachineRestartPolicyAlways string = "always"

	// APIMachineRestartPolicyOnDashFailure captures enum value "on-failure"
	APIMachineRestartPolicyOnDashFailure string = "on-failure"
)

// prop value enum
func (m *APIMachineRestart) validatePolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, apiMachineRestartTypePolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *APIMachineRestart) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolicyEnum("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this api machine restart based on context it is used
func (m *APIMachineRestart) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *APIMachineRestart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMachineRestart) UnmarshalBinary(b []byte) error {
	var res APIMachineRestart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
