// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIMachineService api machine service
//
// swagger:model api.MachineService
type APIMachineService struct {

	// autostart
	Autostart bool `json:"autostart,omitempty"`

	// autostop
	Autostop bool `json:"autostop,omitempty"`

	// checks
	Checks []*APIMachineCheck `json:"checks"`

	// concurrency
	Concurrency *APIMachineServiceConcurrency `json:"concurrency,omitempty"`

	// force instance description
	ForceInstanceDescription string `json:"force_instance_description,omitempty"`

	// force instance key
	ForceInstanceKey string `json:"force_instance_key,omitempty"`

	// internal port
	InternalPort int64 `json:"internal_port,omitempty"`

	// min machines running
	MinMachinesRunning int64 `json:"min_machines_running,omitempty"`

	// ports
	Ports []*APIMachinePort `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this api machine service
func (m *APIMachineService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConcurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachineService) validateChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {
		if swag.IsZero(m.Checks[i]) { // not required
			continue
		}

		if m.Checks[i] != nil {
			if err := m.Checks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineService) validateConcurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Concurrency) { // not required
		return nil
	}

	if m.Concurrency != nil {
		if err := m.Concurrency.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("concurrency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("concurrency")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineService) validatePorts(formats strfmt.Registry) error {
	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api machine service based on the context it is used
func (m *APIMachineService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConcurrency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePorts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachineService) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks); i++ {

		if m.Checks[i] != nil {

			if swag.IsZero(m.Checks[i]) { // not required
				return nil
			}

			if err := m.Checks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineService) contextValidateConcurrency(ctx context.Context, formats strfmt.Registry) error {

	if m.Concurrency != nil {

		if swag.IsZero(m.Concurrency) { // not required
			return nil
		}

		if err := m.Concurrency.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("concurrency")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("concurrency")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineService) contextValidatePorts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Ports); i++ {

		if m.Ports[i] != nil {

			if swag.IsZero(m.Ports[i]) { // not required
				return nil
			}

			if err := m.Ports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMachineService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMachineService) UnmarshalBinary(b []byte) error {
	var res APIMachineService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
