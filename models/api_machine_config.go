// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// APIMachineConfig api machine config
//
// swagger:model api.MachineConfig
type APIMachineConfig struct {

	// Optional boolean telling the Machine to destroy itself once itâ€™s complete (default false)
	AutoDestroy bool `json:"auto_destroy,omitempty"`

	// checks
	Checks map[string]APIMachineCheck `json:"checks,omitempty"`

	// Deprecated: use Service.Autostart instead
	DisableMachineAutostart bool `json:"disable_machine_autostart,omitempty"`

	// dns
	DNS *APIDNSConfig `json:"dns,omitempty"`

	// An object filled with key/value pairs to be set as environment variables
	Env map[string]string `json:"env,omitempty"`

	// files
	Files []*APIFile `json:"files"`

	// guest
	Guest *APIMachineGuest `json:"guest,omitempty"`

	// The docker image to run
	Image string `json:"image,omitempty"`

	// init
	Init *APIMachineInit `json:"init,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// metrics
	Metrics *APIMachineMetrics `json:"metrics,omitempty"`

	// mounts
	Mounts []*APIMachineMount `json:"mounts"`

	// processes
	Processes []*APIMachineProcess `json:"processes"`

	// restart
	Restart *APIMachineRestart `json:"restart,omitempty"`

	// schedule
	Schedule string `json:"schedule,omitempty"`

	// services
	Services []*APIMachineService `json:"services"`

	// Deprecated: use Guest instead
	Size string `json:"size,omitempty"`

	// Standbys enable a machine to be a standby for another. In the event of a hardware failure,
	// the standby machine will be started.
	Standbys []string `json:"standbys"`

	// statics
	Statics []*APIStatic `json:"statics"`

	// stop config
	StopConfig *APIStopConfig `json:"stop_config,omitempty"`
}

// Validate validates this api machine config
func (m *APIMachineConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcesses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachineConfig) validateChecks(formats strfmt.Registry) error {
	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for k := range m.Checks {

		if err := validate.Required("checks"+"."+k, "body", m.Checks[k]); err != nil {
			return err
		}
		if val, ok := m.Checks[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checks" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) validateDNS(formats strfmt.Registry) error {
	if swag.IsZero(m.DNS) { // not required
		return nil
	}

	if m.DNS != nil {
		if err := m.DNS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) validateGuest(formats strfmt.Registry) error {
	if swag.IsZero(m.Guest) { // not required
		return nil
	}

	if m.Guest != nil {
		if err := m.Guest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) validateInit(formats strfmt.Registry) error {
	if swag.IsZero(m.Init) { // not required
		return nil
	}

	if m.Init != nil {
		if err := m.Init.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("init")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("init")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) validateMounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Mounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Mounts); i++ {
		if swag.IsZero(m.Mounts[i]) { // not required
			continue
		}

		if m.Mounts[i] != nil {
			if err := m.Mounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) validateProcesses(formats strfmt.Registry) error {
	if swag.IsZero(m.Processes) { // not required
		return nil
	}

	for i := 0; i < len(m.Processes); i++ {
		if swag.IsZero(m.Processes[i]) { // not required
			continue
		}

		if m.Processes[i] != nil {
			if err := m.Processes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) validateRestart(formats strfmt.Registry) error {
	if swag.IsZero(m.Restart) { // not required
		return nil
	}

	if m.Restart != nil {
		if err := m.Restart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restart")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) validateStatics(formats strfmt.Registry) error {
	if swag.IsZero(m.Statics) { // not required
		return nil
	}

	for i := 0; i < len(m.Statics); i++ {
		if swag.IsZero(m.Statics[i]) { // not required
			continue
		}

		if m.Statics[i] != nil {
			if err := m.Statics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) validateStopConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StopConfig) { // not required
		return nil
	}

	if m.StopConfig != nil {
		if err := m.StopConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api machine config based on the context it is used
func (m *APIMachineConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNS(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcesses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachineConfig) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Checks {

		if val, ok := m.Checks[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) contextValidateDNS(ctx context.Context, formats strfmt.Registry) error {

	if m.DNS != nil {

		if swag.IsZero(m.DNS) { // not required
			return nil
		}

		if err := m.DNS.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {

			if swag.IsZero(m.Files[i]) { // not required
				return nil
			}

			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) contextValidateGuest(ctx context.Context, formats strfmt.Registry) error {

	if m.Guest != nil {

		if swag.IsZero(m.Guest) { // not required
			return nil
		}

		if err := m.Guest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("guest")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) contextValidateInit(ctx context.Context, formats strfmt.Registry) error {

	if m.Init != nil {

		if swag.IsZero(m.Init) { // not required
			return nil
		}

		if err := m.Init.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("init")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("init")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.Metrics != nil {

		if swag.IsZero(m.Metrics) { // not required
			return nil
		}

		if err := m.Metrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) contextValidateMounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mounts); i++ {

		if m.Mounts[i] != nil {

			if swag.IsZero(m.Mounts[i]) { // not required
				return nil
			}

			if err := m.Mounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) contextValidateProcesses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Processes); i++ {

		if m.Processes[i] != nil {

			if swag.IsZero(m.Processes[i]) { // not required
				return nil
			}

			if err := m.Processes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("processes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("processes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) contextValidateRestart(ctx context.Context, formats strfmt.Registry) error {

	if m.Restart != nil {

		if swag.IsZero(m.Restart) { // not required
			return nil
		}

		if err := m.Restart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restart")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachineConfig) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {

			if swag.IsZero(m.Services[i]) { // not required
				return nil
			}

			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) contextValidateStatics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Statics); i++ {

		if m.Statics[i] != nil {

			if swag.IsZero(m.Statics[i]) { // not required
				return nil
			}

			if err := m.Statics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("statics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *APIMachineConfig) contextValidateStopConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StopConfig != nil {

		if swag.IsZero(m.StopConfig) { // not required
			return nil
		}

		if err := m.StopConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stop_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMachineConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMachineConfig) UnmarshalBinary(b []byte) error {
	var res APIMachineConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
