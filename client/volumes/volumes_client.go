// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volumes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volumes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	VolumeDelete(params *VolumeDeleteParams, opts ...ClientOption) (*VolumeDeleteOK, error)

	VolumesCreate(params *VolumesCreateParams, opts ...ClientOption) (*VolumesCreateOK, error)

	VolumesExtend(params *VolumesExtendParams, opts ...ClientOption) (*VolumesExtendOK, error)

	VolumesGetByID(params *VolumesGetByIDParams, opts ...ClientOption) (*VolumesGetByIDOK, error)

	VolumesList(params *VolumesListParams, opts ...ClientOption) (*VolumesListOK, error)

	VolumesListSnapshots(params *VolumesListSnapshotsParams, opts ...ClientOption) (*VolumesListSnapshotsOK, error)

	VolumesUpdate(params *VolumesUpdateParams, opts ...ClientOption) (*VolumesUpdateOK, error)

	CreateVolumeSnapshot(params *CreateVolumeSnapshotParams, opts ...ClientOption) (*CreateVolumeSnapshotOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
VolumeDelete volume delete API
*/
func (a *Client) VolumeDelete(params *VolumeDeleteParams, opts ...ClientOption) (*VolumeDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volume_delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app_name}/volumes/{volume_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volume_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VolumesCreate volumes create API
*/
func (a *Client) VolumesCreate(params *VolumesCreateParams, opts ...ClientOption) (*VolumesCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volumes_create",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumesCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volumes_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VolumesExtend volumes extend API
*/
func (a *Client) VolumesExtend(params *VolumesExtendParams, opts ...ClientOption) (*VolumesExtendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesExtendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volumes_extend",
		Method:             "PUT",
		PathPattern:        "/apps/{app_name}/volumes/{volume_id}/extend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumesExtendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesExtendOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volumes_extend: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VolumesGetByID volumes get by id API
*/
func (a *Client) VolumesGetByID(params *VolumesGetByIDParams, opts ...ClientOption) (*VolumesGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesGetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volumes_get_by_id",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/volumes/{volume_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumesGetByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volumes_get_by_id: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VolumesList volumes list API
*/
func (a *Client) VolumesList(params *VolumesListParams, opts ...ClientOption) (*VolumesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volumes_list",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volumes_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VolumesListSnapshots volumes list snapshots API
*/
func (a *Client) VolumesListSnapshots(params *VolumesListSnapshotsParams, opts ...ClientOption) (*VolumesListSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesListSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volumes_list_snapshots",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}/volumes/{volume_id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumesListSnapshotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesListSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volumes_list_snapshots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VolumesUpdate volumes update API
*/
func (a *Client) VolumesUpdate(params *VolumesUpdateParams, opts ...ClientOption) (*VolumesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumesUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Volumes_update",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/volumes/{volume_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumesUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumesUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Volumes_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateVolumeSnapshot create volume snapshot API
*/
func (a *Client) CreateVolumeSnapshot(params *CreateVolumeSnapshotParams, opts ...ClientOption) (*CreateVolumeSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeSnapshotParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createVolumeSnapshot",
		Method:             "POST",
		PathPattern:        "/apps/{app_name}/volumes/{volume_id}/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateVolumeSnapshotReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateVolumeSnapshotOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createVolumeSnapshot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
