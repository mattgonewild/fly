// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewMachinesListProcessesParams creates a new MachinesListProcessesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMachinesListProcessesParams() *MachinesListProcessesParams {
	return &MachinesListProcessesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewMachinesListProcessesParamsWithTimeout creates a new MachinesListProcessesParams object
// with the ability to set a timeout on a request.
func NewMachinesListProcessesParamsWithTimeout(timeout time.Duration) *MachinesListProcessesParams {
	return &MachinesListProcessesParams{
		timeout: timeout,
	}
}

// NewMachinesListProcessesParamsWithContext creates a new MachinesListProcessesParams object
// with the ability to set a context for a request.
func NewMachinesListProcessesParamsWithContext(ctx context.Context) *MachinesListProcessesParams {
	return &MachinesListProcessesParams{
		Context: ctx,
	}
}

// NewMachinesListProcessesParamsWithHTTPClient creates a new MachinesListProcessesParams object
// with the ability to set a custom HTTPClient for a request.
func NewMachinesListProcessesParamsWithHTTPClient(client *http.Client) *MachinesListProcessesParams {
	return &MachinesListProcessesParams{
		HTTPClient: client,
	}
}

/*
MachinesListProcessesParams contains all the parameters to send to the API endpoint

	for the machines list processes operation.

	Typically these are written to a http.Request.
*/
type MachinesListProcessesParams struct {

	/* AppName.

	   Fly App Name
	*/
	AppName string

	/* MachineID.

	   Machine ID
	*/
	MachineID string

	/* Order.

	   Order
	*/
	Order *string

	/* SortBy.

	   Sort by
	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the machines list processes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MachinesListProcessesParams) WithDefaults() *MachinesListProcessesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the machines list processes params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MachinesListProcessesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the machines list processes params
func (o *MachinesListProcessesParams) WithTimeout(timeout time.Duration) *MachinesListProcessesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the machines list processes params
func (o *MachinesListProcessesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the machines list processes params
func (o *MachinesListProcessesParams) WithContext(ctx context.Context) *MachinesListProcessesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the machines list processes params
func (o *MachinesListProcessesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the machines list processes params
func (o *MachinesListProcessesParams) WithHTTPClient(client *http.Client) *MachinesListProcessesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the machines list processes params
func (o *MachinesListProcessesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the machines list processes params
func (o *MachinesListProcessesParams) WithAppName(appName string) *MachinesListProcessesParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the machines list processes params
func (o *MachinesListProcessesParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithMachineID adds the machineID to the machines list processes params
func (o *MachinesListProcessesParams) WithMachineID(machineID string) *MachinesListProcessesParams {
	o.SetMachineID(machineID)
	return o
}

// SetMachineID adds the machineId to the machines list processes params
func (o *MachinesListProcessesParams) SetMachineID(machineID string) {
	o.MachineID = machineID
}

// WithOrder adds the order to the machines list processes params
func (o *MachinesListProcessesParams) WithOrder(order *string) *MachinesListProcessesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the machines list processes params
func (o *MachinesListProcessesParams) SetOrder(order *string) {
	o.Order = order
}

// WithSortBy adds the sortBy to the machines list processes params
func (o *MachinesListProcessesParams) WithSortBy(sortBy *string) *MachinesListProcessesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the machines list processes params
func (o *MachinesListProcessesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *MachinesListProcessesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param app_name
	if err := r.SetPathParam("app_name", o.AppName); err != nil {
		return err
	}

	// path param machine_id
	if err := r.SetPathParam("machine_id", o.MachineID); err != nil {
		return err
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
