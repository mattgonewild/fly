// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIMachineCheck An optional object that defines one or more named checks. The key for each check is the check name.
//
// swagger:model api.MachineCheck
type APIMachineCheck struct {

	// The time to wait after a VM starts before checking its health
	GracePeriod string `json:"grace_period,omitempty"`

	// headers
	Headers []*APIMachineHTTPHeader `json:"headers"`

	// The time between connectivity checks
	Interval string `json:"interval,omitempty"`

	// For http checks, the HTTP method to use to when making the request
	Method string `json:"method,omitempty"`

	// For http checks, the path to send the request to
	Path string `json:"path,omitempty"`

	// The port to connect to, often the same as internal_port
	Port int64 `json:"port,omitempty"`

	// For http checks, whether to use http or https
	Protocol string `json:"protocol,omitempty"`

	// The maximum time a connection can take before being reported as failing its health check
	Timeout string `json:"timeout,omitempty"`

	// If the protocol is https, the hostname to use for TLS certificate validation
	TLSServerName string `json:"tls_server_name,omitempty"`

	// For http checks with https protocol, whether or not to verify the TLS certificate
	TLSSkipVerify bool `json:"tls_skip_verify,omitempty"`

	// tcp or http
	Type string `json:"type,omitempty"`
}

// Validate validates this api machine check
func (m *APIMachineCheck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeaders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachineCheck) validateHeaders(formats strfmt.Registry) error {
	if swag.IsZero(m.Headers) { // not required
		return nil
	}

	for i := 0; i < len(m.Headers); i++ {
		if swag.IsZero(m.Headers[i]) { // not required
			continue
		}

		if m.Headers[i] != nil {
			if err := m.Headers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api machine check based on the context it is used
func (m *APIMachineCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeaders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachineCheck) contextValidateHeaders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Headers); i++ {

		if m.Headers[i] != nil {

			if swag.IsZero(m.Headers[i]) { // not required
				return nil
			}

			if err := m.Headers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("headers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("headers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMachineCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMachineCheck) UnmarshalBinary(b []byte) error {
	var res APIMachineCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
