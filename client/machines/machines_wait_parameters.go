// Code generated by go-swagger; DO NOT EDIT.

package machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewMachinesWaitParams creates a new MachinesWaitParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewMachinesWaitParams() *MachinesWaitParams {
	return &MachinesWaitParams{
		requestTimeout: cr.DefaultTimeout,
	}
}

// NewMachinesWaitParamsWithTimeout creates a new MachinesWaitParams object
// with the ability to set a timeout on a request.
func NewMachinesWaitParamsWithTimeout(timeout time.Duration) *MachinesWaitParams {
	return &MachinesWaitParams{
		requestTimeout: timeout,
	}
}

// NewMachinesWaitParamsWithContext creates a new MachinesWaitParams object
// with the ability to set a context for a request.
func NewMachinesWaitParamsWithContext(ctx context.Context) *MachinesWaitParams {
	return &MachinesWaitParams{
		Context: ctx,
	}
}

// NewMachinesWaitParamsWithHTTPClient creates a new MachinesWaitParams object
// with the ability to set a custom HTTPClient for a request.
func NewMachinesWaitParamsWithHTTPClient(client *http.Client) *MachinesWaitParams {
	return &MachinesWaitParams{
		HTTPClient: client,
	}
}

/*
MachinesWaitParams contains all the parameters to send to the API endpoint

	for the machines wait operation.

	Typically these are written to a http.Request.
*/
type MachinesWaitParams struct {

	/* AppName.

	   Fly App Name
	*/
	AppName string

	/* InstanceID.

	   instance? version? TODO
	*/
	InstanceID *string

	/* MachineID.

	   Machine ID
	*/
	MachineID string

	/* State.

	   desired state
	*/
	State *string

	/* Timeout.

	   wait timeout. default 60s
	*/
	Timeout *int64

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithDefaults hydrates default values in the machines wait params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MachinesWaitParams) WithDefaults() *MachinesWaitParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the machines wait params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *MachinesWaitParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithRequestTimeout adds the timeout to the machines wait params
func (o *MachinesWaitParams) WithRequestTimeout(timeout time.Duration) *MachinesWaitParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the machines wait params
func (o *MachinesWaitParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the machines wait params
func (o *MachinesWaitParams) WithContext(ctx context.Context) *MachinesWaitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the machines wait params
func (o *MachinesWaitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the machines wait params
func (o *MachinesWaitParams) WithHTTPClient(client *http.Client) *MachinesWaitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the machines wait params
func (o *MachinesWaitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppName adds the appName to the machines wait params
func (o *MachinesWaitParams) WithAppName(appName string) *MachinesWaitParams {
	o.SetAppName(appName)
	return o
}

// SetAppName adds the appName to the machines wait params
func (o *MachinesWaitParams) SetAppName(appName string) {
	o.AppName = appName
}

// WithInstanceID adds the instanceID to the machines wait params
func (o *MachinesWaitParams) WithInstanceID(instanceID *string) *MachinesWaitParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the machines wait params
func (o *MachinesWaitParams) SetInstanceID(instanceID *string) {
	o.InstanceID = instanceID
}

// WithMachineID adds the machineID to the machines wait params
func (o *MachinesWaitParams) WithMachineID(machineID string) *MachinesWaitParams {
	o.SetMachineID(machineID)
	return o
}

// SetMachineID adds the machineId to the machines wait params
func (o *MachinesWaitParams) SetMachineID(machineID string) {
	o.MachineID = machineID
}

// WithState adds the state to the machines wait params
func (o *MachinesWaitParams) WithState(state *string) *MachinesWaitParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the machines wait params
func (o *MachinesWaitParams) SetState(state *string) {
	o.State = state
}

// WithTimeout adds the timeout to the machines wait params
func (o *MachinesWaitParams) WithTimeout(timeout *int64) *MachinesWaitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the machines wait params
func (o *MachinesWaitParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *MachinesWaitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// path param app_name
	if err := r.SetPathParam("app_name", o.AppName); err != nil {
		return err
	}

	if o.InstanceID != nil {

		// query param instance_id
		var qrInstanceID string

		if o.InstanceID != nil {
			qrInstanceID = *o.InstanceID
		}
		qInstanceID := qrInstanceID
		if qInstanceID != "" {

			if err := r.SetQueryParam("instance_id", qInstanceID); err != nil {
				return err
			}
		}
	}

	// path param machine_id
	if err := r.SetPathParam("machine_id", o.MachineID); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64

		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {

			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
