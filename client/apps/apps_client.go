// Code generated by go-swagger; DO NOT EDIT.

package apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new apps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for apps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppsCreate(params *AppsCreateParams, opts ...ClientOption) (*AppsCreateCreated, error)

	AppsDelete(params *AppsDeleteParams, opts ...ClientOption) (*AppsDeleteAccepted, error)

	AppsList(params *AppsListParams, opts ...ClientOption) (*AppsListOK, error)

	AppsShow(params *AppsShowParams, opts ...ClientOption) (*AppsShowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppsCreate apps create API
*/
func (a *Client) AppsCreate(params *AppsCreateParams, opts ...ClientOption) (*AppsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Apps_create",
		Method:             "POST",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppsCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Apps_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppsDelete apps delete API
*/
func (a *Client) AppsDelete(params *AppsDeleteParams, opts ...ClientOption) (*AppsDeleteAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Apps_delete",
		Method:             "DELETE",
		PathPattern:        "/apps/{app_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppsDeleteAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Apps_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppsList apps list API
*/
func (a *Client) AppsList(params *AppsListParams, opts ...ClientOption) (*AppsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Apps_list",
		Method:             "GET",
		PathPattern:        "/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Apps_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppsShow apps show API
*/
func (a *Client) AppsShow(params *AppsShowParams, opts ...ClientOption) (*AppsShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppsShowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Apps_show",
		Method:             "GET",
		PathPattern:        "/apps/{app_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppsShowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppsShowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Apps_show: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
