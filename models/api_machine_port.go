// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIMachinePort api machine port
//
// swagger:model api.MachinePort
type APIMachinePort struct {

	// end port
	EndPort int64 `json:"end_port,omitempty"`

	// force https
	ForceHTTPS bool `json:"force_https,omitempty"`

	// handlers
	Handlers []string `json:"handlers"`

	// http options
	HTTPOptions *APIHTTPOptions `json:"http_options,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// proxy proto options
	ProxyProtoOptions *APIProxyProtoOptions `json:"proxy_proto_options,omitempty"`

	// start port
	StartPort int64 `json:"start_port,omitempty"`

	// tls options
	TLSOptions *APITLSOptions `json:"tls_options,omitempty"`
}

// Validate validates this api machine port
func (m *APIMachinePort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyProtoOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachinePort) validateHTTPOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPOptions) { // not required
		return nil
	}

	if m.HTTPOptions != nil {
		if err := m.HTTPOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_options")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachinePort) validateProxyProtoOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyProtoOptions) { // not required
		return nil
	}

	if m.ProxyProtoOptions != nil {
		if err := m.ProxyProtoOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy_proto_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy_proto_options")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachinePort) validateTLSOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TLSOptions) { // not required
		return nil
	}

	if m.TLSOptions != nil {
		if err := m.TLSOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls_options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this api machine port based on the context it is used
func (m *APIMachinePort) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHTTPOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxyProtoOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTLSOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIMachinePort) contextValidateHTTPOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.HTTPOptions != nil {

		if swag.IsZero(m.HTTPOptions) { // not required
			return nil
		}

		if err := m.HTTPOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("http_options")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachinePort) contextValidateProxyProtoOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ProxyProtoOptions != nil {

		if swag.IsZero(m.ProxyProtoOptions) { // not required
			return nil
		}

		if err := m.ProxyProtoOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy_proto_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy_proto_options")
			}
			return err
		}
	}

	return nil
}

func (m *APIMachinePort) contextValidateTLSOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.TLSOptions != nil {

		if swag.IsZero(m.TLSOptions) { // not required
			return nil
		}

		if err := m.TLSOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tls_options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tls_options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIMachinePort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIMachinePort) UnmarshalBinary(b []byte) error {
	var res APIMachinePort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
